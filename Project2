import random
import json
import os

# Path to the JSON file where scores are stored
score_file = "scores.json"

# Function to load scores from the JSON file
def load_scores():
    if os.path.exists(score_file):
        with open(score_file, 'r') as file:
            return json.load(file)
    else:
        return {'user_score': 0, 'computer_score': 0}

# Function to save scores to the JSON file
def save_scores(user_score, computer_score):
    scores = {'user_score': user_score, 'computer_score': computer_score}
    with open(score_file, 'w') as file:
        json.dump(scores, file)

# Function to determine the winner of the round
def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        return "You win!"
    else:
        return "You lose!"

# Function to get a valid user choice
def get_user_choice():
    user_choice = input("Choose rock, paper, or scissors: ").lower()
    while user_choice not in ['rock', 'paper', 'scissors']:
        user_choice = input("Invalid choice. Please choose rock, paper, or scissors: ").lower()
    return user_choice

# Main function to play the game
def play_game():
    # Load previous scores
    scores = load_scores()
    user_score = scores['user_score']
    computer_score = scores['computer_score']

    print("Welcome to Rock-Paper-Scissors!")
    print("Instructions: Choose 'rock', 'paper', or 'scissors' to play.")

    # Loop for multiple rounds
    while True:
        user_choice = get_user_choice()

        # Generate the computer's choice randomly
        computer_choice = random.choice(['rock', 'paper', 'scissors'])

        # Display choices
        print(f"\nYou chose: {user_choice}")
        print(f"The computer chose: {computer_choice}")

        # Determine the winner and update scores
        result = determine_winner(user_choice, computer_choice)
        print(result)
        if result == "You win!":
            user_score += 1
        elif result == "You lose!":
            computer_score += 1

        # Display current scores
        print(f"Score: You - {user_score} | Computer - {computer_score}\n")

        # Save updated scores to the JSON file
        save_scores(user_score, computer_score)

        # Ask if the user wants to play again
        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != 'yes':
            print("\nThanks for playing!")
            break

# Start the game
if __name__ == "__main__":
    play_game()
import random
import json
import os

# Path to the JSON file where scores are stored
score_file = "scores.json"

# Function to load scores from the JSON file
def load_scores():
    if os.path.exists(score_file):
        with open(score_file, 'r') as file:
            return json.load(file)
    else:
        return {'user_score': 0, 'computer_score': 0}

# Function to save scores to the JSON file
def save_scores(user_score, computer_score):
    scores = {'user_score': user_score, 'computer_score': computer_score}
    with open(score_file, 'w') as file:
        json.dump(scores, file)

# Function to determine the winner of the round
def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        return "You win!"
    else:
        return "You lose!"

# Function to get a valid user choice
def get_user_choice():
    user_choice = input("Choose rock, paper, or scissors: ").lower()
    while user_choice not in ['rock', 'paper', 'scissors']:
        user_choice = input("Invalid choice. Please choose rock, paper, or scissors: ").lower()
    return user_choice

# Main function to play the game
def play_game():
    # Load previous scores
    scores = load_scores()
    user_score = scores['user_score']
    computer_score = scores['computer_score']

    print("Welcome to Rock-Paper-Scissors!")
    print("Instructions: Choose 'rock', 'paper', or 'scissors' to play.")

    # Loop for multiple rounds
    while True:
        user_choice = get_user_choice()

        # Generate the computer's choice randomly
        computer_choice = random.choice(['rock', 'paper', 'scissors'])

        # Display choices
        print(f"\nYou chose: {user_choice}")
        print(f"The computer chose: {computer_choice}")

        # Determine the winner and update scores
        result = determine_winner(user_choice, computer_choice)
        print(result)
        if result == "You win!":
            user_score += 1
        elif result == "You lose!":
            computer_score += 1

        # Display current scores
        print(f"Score: You - {user_score} | Computer - {computer_score}\n")

        # Save updated scores to the JSON file
        save_scores(user_score, computer_score)

        # Ask if the user wants to play again
        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != 'yes':
            print("\nThanks for playing!")
            break

# Start the game
if __name__ == "__main__":
    play_game()
import random
import json
import os

# Path to the JSON file where scores are stored
score_file = "scores.json"

# Function to load scores from the JSON file
def load_scores():
    if os.path.exists(score_file):
        with open(score_file, 'r') as file:
            return json.load(file)
    else:
        return {'user_score': 0, 'computer_score': 0}

# Function to save scores to the JSON file
def save_scores(user_score, computer_score):
    scores = {'user_score': user_score, 'computer_score': computer_score}
    with open(score_file, 'w') as file:
        json.dump(scores, file)

# Function to determine the winner of the round
def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        return "You win!"
    else:
        return "You lose!"

# Function to get a valid user choice
def get_user_choice():
    user_choice = input("Choose rock, paper, or scissors: ").lower()
    while user_choice not in ['rock', 'paper', 'scissors']:
        user_choice = input("Invalid choice. Please choose rock, paper, or scissors: ").lower()
    return user_choice

# Main function to play the game
def play_game():
    # Load previous scores
    scores = load_scores()
    user_score = scores['user_score']
    computer_score = scores['computer_score']

    print("Welcome to Rock-Paper-Scissors!")
    print("Instructions: Choose 'rock', 'paper', or 'scissors' to play.")

    # Loop for multiple rounds
    while True:
        user_choice = get_user_choice()

        # Generate the computer's choice randomly
        computer_choice = random.choice(['rock', 'paper', 'scissors'])

        # Display choices
        print(f"\nYou chose: {user_choice}")
        print(f"The computer chose: {computer_choice}")

        # Determine the winner and update scores
        result = determine_winner(user_choice, computer_choice)
        print(result)
        if result == "You win!":
            user_score += 1
        elif result == "You lose!":
            computer_score += 1

        # Display current scores
        print(f"Score: You - {user_score} | Computer - {computer_score}\n")

        # Save updated scores to the JSON file
        save_scores(user_score, computer_score)

        # Ask if the user wants to play again
        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != 'yes':
            print("\nThanks for playing!")
            break

# Start the game
if __name__ == "__main__":
    play_game()
import random
import json
import os

# Path to the JSON file where scores are stored
score_file = "scores.json"

# Function to load scores from the JSON file
def load_scores():
    if os.path.exists(score_file):
        with open(score_file, 'r') as file:
            return json.load(file)
    else:
        return {'user_score': 0, 'computer_score': 0}

# Function to save scores to the JSON file
def save_scores(user_score, computer_score):
    scores = {'user_score': user_score, 'computer_score': computer_score}
    with open(score_file, 'w') as file:
        json.dump(scores, file)

# Function to determine the winner of the round
def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "It's a tie!"
    elif (user_choice == 'rock' and computer_choice == 'scissors') or \
         (user_choice == 'scissors' and computer_choice == 'paper') or \
         (user_choice == 'paper' and computer_choice == 'rock'):
        return "You win!"
    else:
        return "You lose!"

# Function to get a valid user choice
def get_user_choice():
    user_choice = input("Choose rock, paper, or scissors: ").lower()
    while user_choice not in ['rock', 'paper', 'scissors']:
        user_choice = input("Invalid choice. Please choose rock, paper, or scissors: ").lower()
    return user_choice

# Main function to play the game
def play_game():
    # Load previous scores
    scores = load_scores()
    user_score = scores['user_score']
    computer_score = scores['computer_score']

    print("Welcome to Rock-Paper-Scissors!")
    print("Instructions: Choose 'rock', 'paper', or 'scissors' to play.")

    # Loop for multiple rounds
    while True:
        user_choice = get_user_choice()

        # Generate the computer's choice randomly
        computer_choice = random.choice(['rock', 'paper', 'scissors'])

        # Display choices
        print(f"\nYou chose: {user_choice}")
        print(f"The computer chose: {computer_choice}")

        # Determine the winner and update scores
        result = determine_winner(user_choice, computer_choice)
        print(result)
        if result == "You win!":
            user_score += 1
        elif result == "You lose!":
            computer_score += 1

        # Display current scores
        print(f"Score: You - {user_score} | Computer - {computer_score}\n")

        # Save updated scores to the JSON file
        save_scores(user_score, computer_score)

        # Ask if the user wants to play again
        play_again = input("Do you want to play again? (yes/no): ").lower()
        if play_again != 'yes':
            print("\nThanks for playing!")
            break

# Start the game
if __name__ == "__main__":
    play_game()
